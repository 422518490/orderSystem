
#user  nobody;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

	#开启高效传输模式
    sendfile        on;
	
	#防止网络阻塞
    tcp_nopush on;
    tcp_nodelay on;

	#客户端连接超时时间，单位是秒
    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	#响应客户端超时时间
    send_timeout 10;

	#开启gzip压缩输出
    gzip  on;
	
	#最小压缩文件大小
    gzip_min_length 1k; 
	
    #压缩缓冲区
    gzip_buffers 4 16k;
	
    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_http_version 1.0;
	
    #压缩等级 1-9 等级越高，压缩效果越好，节约宽带，但CPU消耗大
    gzip_comp_level 2;
	
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_types text/plain application/x-javascript text/css application/xml;
	
    #前端缓存服务器缓存经过压缩的页面
    gzip_vary on;
	
	#反向代理配置
	
	#nginx跟后端服务器连接超时时间(代理连接超时)
	proxy_connect_timeout      5;
	#后端服务器数据回传时间(代理发送超时)
	proxy_send_timeout         5;
	#连接成功后，后端服务器响应时间(代理接收超时)
	proxy_read_timeout         60;
	#设置代理服务器（nginx）保存用户头信息的缓冲区大小
	proxy_buffer_size          16k;
	#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
	proxy_buffers              4 32k;
	#高负荷下缓冲大小（proxy_buffers*2）
	proxy_busy_buffers_size    64k;
	#设定缓存文件夹大小，大于这个值，将从upstream服务器传
	proxy_temp_file_write_size 64k;
	#反向代理缓存目录
	proxy_cache_path e:/data/proxy/cache levels=1:2 keys_zone=cache_one:500m inactive=1d max_size=1g;
	#levels=1:2 设置目录深度，第一层目录是1个字符，第2层是2个字符
	#keys_zone:设置web缓存名称和内存缓存空间大小
	#inactive:自动清除缓存文件时间。
	#max_size:硬盘空间最大可使用值。
	#指定临时缓存文件的存储路径(路径需和上面路径在同一分区)
	proxy_temp_path e:/data/proxy/temp;

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
	
	
	server {
		#侦听的80端口
		listen       8080;
		server_name  localhost;
		
		location / {  
            root   html;  
            index  index.html index.htm;  
        } 
		
		location /merchant/ {
		
			#反向代理缓存设置命令(proxy_cache zone|off,默认关闭所以要设置)
			#proxy_cache cache_one;
			
			#对不同的状态码缓存不同时间
			proxy_cache_valid 200 304 12h;
			
			#设置以什么样参数获取缓存文件名
			proxy_cache_key $host$uri$is_args$args;
			
			#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr; 
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
	  
			#代理设置
			proxy_pass   http://localhost:8081;
			
			#文件过期时间控制
			expires    1d;
		}
		
		location /permission/ {
		
			#反向代理缓存设置命令(proxy_cache zone|off,默认关闭所以要设置)
			#proxy_cache cache_one;
			
			#对不同的状态码缓存不同时间
			proxy_cache_valid 200 304 12h;
			
			#设置以什么样参数获取缓存文件名
			proxy_cache_key $host$uri$is_args$args;
			
			#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr; 
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
	  
			#代理设置
			proxy_pass   http://localhost:8083; 
			
			#文件过期时间控制
			expires    1d;
		}
		
		error_page   500 502 503 504  /50x.html;  
        location = /50x.html {  
            root   html;  
        } 
		
		#配置手动清楚缓存(实现此功能需第三方模块 ngx_cache_purge)
		#http://www.123.com/2017/0316/17.html访问
		#http://www.123.com/purge/2017/0316/17.html清楚URL缓存
		#location ~ /purge(/.*) {
		   # allow   localhost;
		  #  deny    all;
		 #   proxy_cache_purge    cache_one    $host$1$is_args$args;
		#}
		
		#设置扩展名以.jsp、.php、.jspx结尾的动态应用程序不做缓存
		#location ~.*\.(jsp|php|jspx)?$ { 
		#	proxy_set_header Host $host; 
		#	proxy_set_header X-Real-IP $remote_addr; 
		#	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
	  
		#	proxy_pass http://localhost:8081;
		#}
	}
	
}
